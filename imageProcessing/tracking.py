# -*- coding: utf-8 -*-
"""tracking.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ck4rf2v2eSjJ0jLH-cOxEPaX3OkA8xM0
"""

!pip install ultralytics
!pip install supervision

from google.colab import drive
drive.mount('/content/drive')

import cv2
from ultralytics import YOLO
import supervision as sv
import numpy as np
from google.colab.patches import cv2_imshow

print(help(sv.Detections))

LINE_START = sv.Point(0, 150)
LINE_END = sv.Point(402, 150)

def main():
    line_counter = sv.LineZone(start=LINE_START, end=LINE_END)
    line_annotator = sv.LineZoneAnnotator(thickness=2, text_thickness=1, text_scale=0.5)
    box_annotator = sv.BoxAnnotator(
        thickness=2,
        text_thickness=1,
        text_scale=0.5
    )

    model = YOLO("/content/drive/MyDrive/Tracking/best.pt")

    # Değişiklik: Video dosyasının adı ve yolunu belirtin
    video_path = "/content/drive/MyDrive/Tracking/test_1.mp4"
    cap = cv2.VideoCapture(video_path)

    while True:
        ret, frame = cap.read()
        if not ret:
            break  # Video bittiğinde döngüden çık

        # Değişiklik: YOLOv8 modelini kullanarak nesne takibi
        result = model(frame)[0]

        detections = sv.Detections.from_ultralytics(result)

        if result.boxes.id is not None:
            detections.tracker_id = result.boxes.id.cpu().numpy().astype(int)

        detections = detections[(detections.class_id != 60) & (detections.class_id != 0)]

        labels = [
            f"{tracker_id} {model.model.names[class_id]} {confidence:0.2f}"
            for _, confidence, class_id, tracker_id
            in detections
        ]

        frame = box_annotator.annotate(
            scene=frame,
            detections=detections,
            labels=labels
        )

        line_counter.trigger(detections=detections)
        line_annotator.annotate(frame=frame, line_counter=line_counter)

        cv2_imshow(frame)

        if cv2.waitKey(30) == 27:
            break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()